name: AI Code Review by MichaelTran

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  ai_review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get code diff
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            git fetch origin main
            git diff origin/main...HEAD > diff.txt
          else
            git diff HEAD~1 HEAD > diff.txt
          fi

      # ✅ Debug rules & diff
      - name: Debug input files
        run: |
          echo "=== RULES FILE CONTENT ==="
          cat .github/workflows/review_rules.md || echo "❌ review_rules.md NOT FOUND!"
          echo "=== DIFF FILE CONTENT ==="
          cat diff.txt || echo "❌ diff.txt is empty!"
          
          if [ ! -s .github/workflows/review_rules.md ]; then
            echo "❌ ERROR: Rules file is missing or empty!"
            exit 1
          fi
          if [ ! -s diff.txt ]; then
            echo "❌ ERROR: No code changes detected!"
            exit 1
          fi

      - name: Run AI review
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          RULES=$(cat .github/workflows/review_rules.md | sed 's/"/\\"/g')
          DIFF_CONTENT=$(cat diff.txt | sed 's/"/\\"/g')
          PROMPT="${RULES}\n${DIFF_CONTENT}"

          echo "=== Sending prompt to OpenAI ==="
          echo "$PROMPT"

          RESPONSE_RAW=$(curl -s -w "\nHTTP_STATUS:%{http_code}\n" https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d "{
                  \"model\": \"gpt-4o-mini\",
                  \"messages\": [
                    {\"role\": \"system\", \"content\": \"You are a senior software engineer reviewing code.\"},
                    {\"role\": \"user\", \"content\": \"${PROMPT}\"}
                  ]
                }")

          echo "=== RAW RESPONSE FROM OPENAI ==="
          echo "$RESPONSE_RAW"

          # ✅ Check HTTP status
          HTTP_STATUS=$(echo "$RESPONSE_RAW" | grep HTTP_STATUS | cut -d: -f2)
          if [ "$HTTP_STATUS" != "200" ]; then
            echo "❌ ERROR: OpenAI API request failed with status $HTTP_STATUS"
            exit 1
          fi

          # ✅ Extract content
          RESPONSE=$(echo "$RESPONSE_RAW" | grep -v HTTP_STATUS | jq -r '.choices[0].message.content')
          if [ "$RESPONSE" == "null" ] || [ -z "$RESPONSE" ]; then
            echo "❌ ERROR: No response from OpenAI!"
            exit 1
          fi

          echo "$RESPONSE" > review_result.txt

      - name: Show AI review result in logs
        run: cat review_result.txt

      - name: Post comment to PR (if PR)
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: review_result.txt

      - name: Send result to Google Sheet
        env:
          GOOGLE_WEBHOOK_URL: ${{ secrets.GOOGLE_WEBHOOK_URL }}
        run: |
          DATA=$(jq -Rs . < review_result.txt)
          curl -X POST "$GOOGLE_WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d "{\"repo\":\"${{ github.repository }}\", \"event\":\"${{ github.event_name }}\", \"review\":$DATA}"

name: AI Code Review

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  ai_review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get code diff (robust for PR & Push)
        run: |
          echo "Event name: $GITHUB_EVENT_NAME"
          # Use the event JSON to get correct SHAs (works for both push and PR)
          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            BASE_SHA=$(jq -r .pull_request.base.sha < "$GITHUB_EVENT_PATH")
            HEAD_SHA=$(jq -r .pull_request.head.sha < "$GITHUB_EVENT_PATH")
            echo "PR detected. base=$BASE_SHA head=$HEAD_SHA"

            # diff all changes introduced by head relative to base
            git diff --no-color "$BASE_SHA".."$HEAD_SHA" > diff.txt || true
            git diff --name-only "$BASE_SHA".."$HEAD_SHA" > files_changed.txt || true
          else
            BEFORE=$(jq -r .before < "$GITHUB_EVENT_PATH")
            AFTER=$(jq -r .after < "$GITHUB_EVENT_PATH")
            echo "Push detected. before=$BEFORE after=$AFTER"

            if [ "$BEFORE" = "0000000000000000000000000000000000000000" ]; then
              # initial commit case — show the commit contents
              echo "Initial commit detected; diffing last commit"
              git diff --no-color "$AFTER^".."$AFTER" > diff.txt || true
              git diff --name-only "$AFTER^".."$AFTER" > files_changed.txt || true
            else
              git diff --no-color "$BEFORE".."$AFTER" > diff.txt || true
              git diff --name-only "$BEFORE".."$AFTER" > files_changed.txt || true
            fi
          fi

          echo "=== Files changed ==="
          if [ -s files_changed.txt ]; then
            sed -n '1,200p' files_changed.txt
          else
            echo "(no files listed)"
          fi

          echo "=== Diff head (first 500 lines) ==="
          if [ -s diff.txt ]; then
            sed -n '1,500p' diff.txt
          else
            echo "(diff.txt is empty)"
          fi

      - name: Debug input files
        run: |
          echo "=== RULES FILE CONTENT ==="
          cat .github/workflows/review_rules.md || echo "❌ review_rules.md NOT FOUND!"
          echo "=== DIFF FILE SIZE ==="
          wc -c diff.txt || true

          if [ ! -s .github/workflows/review_rules.md ]; then
            echo "❌ ERROR: Rules file is missing or empty!"
            exit 1
          fi
          if [ ! -s diff.txt ]; then
            echo "❌ ERROR: No code changes detected!"
            exit 1
          fi

      - name: Run AI review
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          RULES=$(cat .github/workflows/review_rules.md | jq -Rs .)
          DIFF_CONTENT=$(cat diff.txt | jq -Rs .)

          PROMPT=$(jq -n --arg rules "$RULES" --arg diff "$DIFF_CONTENT" '$rules + "\n" + $diff')

          echo "=== Sending prompt to OpenAI (truncated preview) ==="
          echo "$PROMPT" | sed -n '1,200p'

          REQUEST_BODY=$(jq -n --arg system "You are a senior software engineer reviewing code." --arg user "$PROMPT" '{
            model: "gpt-4o-mini",
            messages: [
              {role: "system", content: $system},
              {role: "user", content: $user}
            ]
          }')

          RESPONSE_RAW=$(curl -s -w "\nHTTP_STATUS:%{http_code}\n" https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d "$REQUEST_BODY")

          echo "=== RAW RESPONSE FROM OPENAI ==="
          echo "$RESPONSE_RAW"

          HTTP_STATUS=$(echo "$RESPONSE_RAW" | grep HTTP_STATUS | cut -d: -f2)
          if [ "$HTTP_STATUS" != "200" ]; then
            echo "❌ ERROR: OpenAI API request failed with status $HTTP_STATUS"
            exit 1
          fi

          RESPONSE=$(echo "$RESPONSE_RAW" | grep -v HTTP_STATUS | jq -r '.choices[0].message.content')
          if [ "$RESPONSE" == "null" ] || [ -z "$RESPONSE" ]; then
            echo "❌ ERROR: No response from OpenAI!"
            exit 1
          fi

          echo "$RESPONSE" > review_result.txt

      - name: Show AI review result in logs
        run: cat review_result.txt

      - name: Post comment to PR (if PR)
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: review_result.txt
          repo-token: ${{ secrets.PAT_TOKEN }}

      - name: Send review result to Slack
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          REVIEW=$(cat review_result.txt)
          PAYLOAD=$(jq -n --arg text "$REVIEW" '{text: $text}')
          curl -X POST -H 'Content-type: application/json' --data "$PAYLOAD" $SLACK_WEBHOOK_URL
